<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lgy.smile.dao.NoticeMapperinterface">

    <select id="list" resultType="com.lgy.smile.dto.NoticeDto" parameterType="int">
        <![CDATA[
		SELECT
			board.identity, board.title, board.content, board.created, 
			board.user,
			(LENGTH(view) - LENGTH(REPLACE(view, ',', ''))) AS "view" ,
     		IFNULL(COUNT(comment.identity), 0) AS "comments"
		FROM
			smile.board_notice board
		LEFT JOIN 
		    smile.comment_notice comment ON board.identity = comment.board
		WHERE
			board.title like '%${searchKeyword}%'
		    OR board.content like '%${searchKeyword}%'
		GROUP BY 
		    smile.board.identity
		ORDER BY 
			smile.board.identity DESC
		LIMIT ${start}, 10
        ]]>
    </select>
    
    <insert id="write" parameterType="hashmap">
		insert into board_notice(identity, title, content, created, view, user) values(
			null , #{title} , #{content} , #{created} , 0 , 0
		)
    </insert>
    
    <select id="contentView" parameterType="hashmap" resultType="com.lgy.smile.dto.NoticeDto">
         select identity, title, content, created, view, user from board_notice where identity=#{identity}

    </select>
    
    <update id="modify" parameterType="hashmap">
		update board_notice set title = #{title}, content = #{content} 
		 where identity=#{identity}
    </update>
    
    <delete id="delete" parameterType="hashmap">
		delete from board_notice where identity=#{identity}
    </delete>
    
      <select id="getCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			smile.board_notice board
		WHERE
			board.title like '%${searchKeyword}%'
			OR board.content like '%${searchKeyword}%'
    </select>
    
    <update id="viewUp" parameterType="hashmap">
    	<![CDATA[
		UPDATE 
			board_notice
		SET 
			view = CONCAT(view, ', ', '${ipaddr}')
		WHERE 
			identity = ${identity}
		    AND view NOT LIKE '%, ${ipaddr}%'
	]]>
    </update>
    
    
    
    
    
    
    
    
    <!-- 새로쓴 게시글 봤는지 확인하는 쿼리 -->
    <select id="confirmedCheck" resultType="int" parameterType="hashmap">
		SELECT 
			CASE WHEN board.user LIKE '%${user}%' 
				THEN 1 
				ELSE -1 
		    END "confirmed"
		FROM 
			smile.board_notice board
		ORDER BY 
			identity DESC LIMIT 0, 1
    </select>
    
    <!-- 새로쓴 게시글 봤다고 등록하는 쿼리 -->
    <update id="confirmedUpdate" parameterType="hashmap">
		UPDATE 
			smile.board_notice board
		SET 
			board.user = CONCAT(board.user, ', ', ${user})
		WHERE 
			board.user NOT LIKE '%, ${user}%'
			AND board.identity = (
						SELECT max_identity
						FROM (
							SELECT MAX(identity) AS max_identity
							FROM smile.board_notice
						) AS subquery
			)
    </update>

</mapper>